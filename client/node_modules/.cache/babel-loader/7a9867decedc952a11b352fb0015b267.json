{"ast":null,"code":"var _jsxFileName = \"/Users/joshcodrescu/Desktop/coin-flip/client/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport CoinFlip from \"./CoinFlip\";\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport coinReady from './coin-back-ready.svg';\nimport coinLoading from './coin-back-loading.svg';\nimport Player from './Player';\nimport './Game.css';\nimport Confetti from 'react-confetti';\nimport { Navigate } from \"react-router-dom\";\n/*\n\np1: load in. fetch(/addPlayer, gameData)\n                .then(  () => fetch(/otherPlayerData, gameData)\n                                .then(  res => res.json()   )\n                                .then(  (result) => {\n                                    if (result.name === null) {\n                                        setTimeout();\n                                    }\n                                    else {\n                                        fetch(/decideWinner, gameData);\n                                    }\n                                        }) )\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const location = useLocation();\n  const [gameData, changeGameData] = useState(location.state ? {\n    'p1': {\n      'name': location.state.name,\n      'side': location.state.side,\n      'wallet': location.state.wallet\n    },\n    'p2': {\n      'name': null,\n      'side': null,\n      'wallet': null\n    },\n    'bet': location.state.bet,\n    'winningSide': null,\n    'gameID': null\n  } : null);\n  const [gameFinished, setGameFinished] = useState(false);\n\n  async function loadGame() {\n    console.log(\"loading...\");\n  } // async function loadGame() {\n  //     let requestOptions = {\n  //         method: 'POST',\n  //         headers: { 'Content-Type': 'application/json' },\n  //         body: JSON.stringify({\"gameID\": gameData.gameID})\n  //     };\n  //     let tempGameData = null;\n  //     fetch('/otherPlayerData', requestOptions)\n  //             .then(otherPlayerData => otherPlayerData.json())\n  //             .then((otherPlayerData) => {\n  //                 if (otherPlayerData.name === null) { // if no other player has joined recall this function in 3 seconds\n  //                     setTimeout(loadGame, 3000);\n  //                 }\n  //                 else { // other player was found so begin game\n  //                     setTimeout(() => {setGameFinished(true)}, 6000);\n  //                     let requestOptions = {\n  //                         method: 'POST',\n  //                         headers: { 'Content-Type': 'application/json' },\n  //                         body: JSON.stringify({'gameID': gameData.gameID})\n  //                     };\n  //                     fetch('/getWinner', requestOptions) // get winner returns the winner of the game\n  //                         .then(winningSide => winningSide.json())\n  //                         .then((winningSide) => {\n  //                             tempGameData = {\n  //                                 'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n  //                                 'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n  //                                 'bet': gameData.bet,\n  //                                 'winningSide': winningSide.side,\n  //                                 'gameID': gameData.gameID\n  //                             };\n  //                         })\n  //                         .then(() => {\n  //                             fetch('/endGame', requestOptions); // end game removes the game from the servers database\n  //                         })\n  //                         .then(() => {\n  //                             changeGameData(tempGameData);\n  //                         })\n  //                         .catch(err => {\n  //                             console.log(err);\n  //                             window.location.href = \"/\";\n  //                         })\n  //                 }\n  //             })\n  //             .catch(err => {\n  //                 console.log(err);\n  //                 window.location.href = \"/\";\n  //             })\n  // }\n\n\n  useEffect(() => {\n    if (gameData === null) {\n      console.log(\"here\");\n      return; // this is to not allow people onto this page if they haven't gone through the 'flip' page\n    }\n\n    if (gameData.gameID === null) {\n      let requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: gameData.p1.name\n        })\n      };\n      fetch('/getPlayerGame', requestOptions).then(result => result.json()).then(playerGame => {\n        if (playerGame.error) {\n          console.log(playerGame.error);\n          changeGameData(null);\n        }\n\n        if (playerGame.found) {\n          // .found means the player exists\n          if (playerGame.gameID) {\n            // if .gameID is not null then the game already exists - don't create a new one\n            changeGameData({\n              'p1': {\n                'name': gameData.name,\n                'side': gameData.side,\n                'wallet': gameData.wallet\n              },\n              'p2': {\n                'name': playerGame.p2.name,\n                'side': playerGame.p2.side,\n                'wallet': playerGame.p2.wallet\n              },\n              'bet': gameData.bet,\n              'winningSide': playerGame.winner,\n              'gameID': playerGame.gameID\n            });\n            return \"game exists\";\n          } else {\n            return \"game doesn't exist\";\n          }\n        } else {\n          // the player doesnt exist - so this page was reached without going through 'flip' page (illegally)\n          return \"player doesn't exist\";\n        }\n      }).then(gameState => {\n        if (gameState === \"game exists\") {\n          // player exists and is already in a game - this was probably an accidental page refresh\n          return null; // all state changes have already been made. This function will reload and schedule poll or show results\n        } else if (gameState === \"game doesn't exist\") {\n          // player exists, but has not joined a game - so join one here\n          let requestOptions = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              \"name\": gameData.p1.name\n            })\n          };\n          return fetch('/joinGame', requestOptions); // join this player into a game\n        } else {\n          // this will cause a recall of this function while will force the user to be routed back to home\n          changeGameData(null);\n          return null;\n        }\n      }).then(result => {\n        if (!result) return null;\n\n        if (result.error) {\n          console.log(result.error);\n          changeGameData(null);\n        }\n\n        result = result.json();\n        changeGameData({\n          'p1': {\n            'name': gameData.name,\n            'side': gameData.side,\n            'wallet': gameData.wallet\n          },\n          'p2': {\n            'name': result.p2.name,\n            'side': result.p2.side,\n            'wallet': result.p2.wallet\n          },\n          'bet': gameData.bet,\n          'winningSide': result.winner,\n          'gameID': gameData.gameID\n        });\n      }).catch(err => {\n        console.log(err);\n        changeGameData(null);\n        return null;\n      });\n    } else if (gameData.winner === null) {\n      setTimeout(loadGame, 3000); // this client is p1, so schedule the polling for p2 to join\n    } else if (gameData.winner !== null) {\n      setTimeout(() => {\n        setGameFinished(true);\n      }, 6000);\n    }\n  }, [gameData]);\n  return gameData ? /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GamePrize\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GamePrizeText\",\n        children: \"Cash Prize:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GamePrizeAmount\",\n        children: gameData.bet * 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"GameMain\",\n      children: [/*#__PURE__*/_jsxDEV(Player, {\n        name: gameData.p1.name,\n        side: gameData.p1.side,\n        result: gameFinished ? gameData.winningSide === gameData.p1.side ? '-winner' : '' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CoinFlip, {\n        animation: gameFinished ? 'done' : gameData.winningSide === null ? 'loading' : 'ready',\n        winningSide: gameData.winningSide,\n        image: gameData.winningSide === null ? coinLoading : coinReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), gameData.winningSide === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '300px',\n          height: '150px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 50\n      }, this) : /*#__PURE__*/_jsxDEV(Player, {\n        name: gameData.p2.name,\n        side: gameData.p2.side,\n        wallet: gameData.p2.wallet,\n        result: gameFinished ? gameData.winningSide === gameData.p2.side ? '-winner' : '' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 106\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), gameFinished ? /*#__PURE__*/_jsxDEV(Confetti, {\n      confettiSource: {\n        x: gameData.winningSide === gameData.p1.side ? 0 : window.innerWidth - 300,\n        y: 0,\n        w: 300,\n        h: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 29\n    }, this) : null, gameFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GameOverOptions\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"GameOverOption\",\n        href: \"/flip\",\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"GameOverOption\",\n        href: \"/\",\n        children: \"Return to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 30\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Game, \"PWPF3LQo9mRjSRVgLsY3nbswOmU=\", false, function () {\n  return [useLocation];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/joshcodrescu/Desktop/coin-flip/client/src/Game.js"],"names":["CoinFlip","useLocation","useEffect","useState","coinReady","coinLoading","Player","Confetti","Navigate","Game","location","gameData","changeGameData","state","name","side","wallet","bet","gameFinished","setGameFinished","loadGame","console","log","gameID","requestOptions","method","headers","body","JSON","stringify","p1","fetch","then","result","json","playerGame","error","found","p2","winner","gameState","catch","err","setTimeout","winningSide","width","height","x","window","innerWidth","y","w","h"],"mappings":"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","sourcesContent":["import CoinFlip from \"./CoinFlip\";\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport coinReady from './coin-back-ready.svg';\nimport coinLoading from './coin-back-loading.svg';\nimport Player from './Player';\nimport './Game.css';\nimport Confetti from 'react-confetti';\nimport { Navigate } from \"react-router-dom\";\n\n/*\n\np1: load in. fetch(/addPlayer, gameData)\n                .then(  () => fetch(/otherPlayerData, gameData)\n                                .then(  res => res.json()   )\n                                .then(  (result) => {\n                                    if (result.name === null) {\n                                        setTimeout();\n                                    }\n                                    else {\n                                        fetch(/decideWinner, gameData);\n                                    }\n                                        }) )\n\n*/\n\nfunction Game() {\n    const location = useLocation();\n    const [gameData, changeGameData] = useState(location.state ? {\n                                                    'p1': {'name': location.state.name, 'side': location.state.side, 'wallet': location.state.wallet}, \n                                                    'p2': {'name': null, 'side': null, 'wallet': null}, \n                                                    'bet': location.state.bet,\n                                                    'winningSide': null,\n                                                    'gameID': null\n                                                    }\n                                                    : null\n                                                );\n    const [gameFinished, setGameFinished] = useState(false);\n\n    async function loadGame() {\n        console.log(\"loading...\")\n    }\n\n    // async function loadGame() {\n    //     let requestOptions = {\n    //         method: 'POST',\n    //         headers: { 'Content-Type': 'application/json' },\n    //         body: JSON.stringify({\"gameID\": gameData.gameID})\n    //     };\n    //     let tempGameData = null;\n    //     fetch('/otherPlayerData', requestOptions)\n    //             .then(otherPlayerData => otherPlayerData.json())\n    //             .then((otherPlayerData) => {\n    //                 if (otherPlayerData.name === null) { // if no other player has joined recall this function in 3 seconds\n    //                     setTimeout(loadGame, 3000);\n    //                 }\n    //                 else { // other player was found so begin game\n    //                     setTimeout(() => {setGameFinished(true)}, 6000);\n    //                     let requestOptions = {\n    //                         method: 'POST',\n    //                         headers: { 'Content-Type': 'application/json' },\n    //                         body: JSON.stringify({'gameID': gameData.gameID})\n    //                     };\n    //                     fetch('/getWinner', requestOptions) // get winner returns the winner of the game\n    //                         .then(winningSide => winningSide.json())\n    //                         .then((winningSide) => {\n    //                             tempGameData = {\n    //                                 'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n    //                                 'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n    //                                 'bet': gameData.bet,\n    //                                 'winningSide': winningSide.side,\n    //                                 'gameID': gameData.gameID\n    //                             };\n    //                         })\n    //                         .then(() => {\n    //                             fetch('/endGame', requestOptions); // end game removes the game from the servers database\n    //                         })\n    //                         .then(() => {\n    //                             changeGameData(tempGameData);\n    //                         })\n    //                         .catch(err => {\n    //                             console.log(err);\n    //                             window.location.href = \"/\";\n    //                         })\n                        \n    //                 }\n    //             })\n    //             .catch(err => {\n    //                 console.log(err);\n    //                 window.location.href = \"/\";\n    //             })\n    // }\n\n    useEffect(() => {\n        if (gameData === null) {\n            console.log(\"here\")\n            return; // this is to not allow people onto this page if they haven't gone through the 'flip' page\n        }\n        if (gameData.gameID === null) {\n            let requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({name: gameData.p1.name})\n            };\n            fetch('/getPlayerGame', requestOptions)\n                .then(result => result.json())\n                .then(playerGame => {\n                    if (playerGame.error) {\n                        console.log(playerGame.error)\n                        changeGameData(null);\n                    }\n                    if (playerGame.found) { // .found means the player exists\n                        if (playerGame.gameID) { // if .gameID is not null then the game already exists - don't create a new one\n                            changeGameData({\n                                'p1': {'name': gameData.name, 'side': gameData.side, 'wallet': gameData.wallet}, \n                                'p2': {'name': playerGame.p2.name, 'side': playerGame.p2.side, 'wallet': playerGame.p2.wallet}, \n                                'bet': gameData.bet,\n                                'winningSide': playerGame.winner,\n                                'gameID': playerGame.gameID\n                            });\n                            return \"game exists\";\n                        }\n                        else {\n                            return \"game doesn't exist\";\n                        }\n                        \n                    }\n                    else { // the player doesnt exist - so this page was reached without going through 'flip' page (illegally)\n                        return \"player doesn't exist\";\n                    }\n                })\n                .then(gameState => {\n                    if (gameState === \"game exists\") { // player exists and is already in a game - this was probably an accidental page refresh\n                        return null; // all state changes have already been made. This function will reload and schedule poll or show results\n                    }\n                    else if (gameState === \"game doesn't exist\") { // player exists, but has not joined a game - so join one here\n                        let requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({\"name\": gameData.p1.name})\n                        };\n                        return fetch('/joinGame', requestOptions) // join this player into a game\n                    }\n                    else { // this will cause a recall of this function while will force the user to be routed back to home\n                        changeGameData(null);\n                        return null;\n                    }\n                })\n                .then(result => {\n                    if (!result) return null;\n                    if (result.error) {\n                        console.log(result.error)\n                        changeGameData(null);\n                    }\n                    result = result.json()\n                    changeGameData({\n                        'p1': {'name': gameData.name, 'side': gameData.side, 'wallet': gameData.wallet}, \n                        'p2': {'name': result.p2.name, 'side': result.p2.side, 'wallet': result.p2.wallet}, \n                        'bet': gameData.bet,\n                        'winningSide': result.winner,\n                        'gameID': gameData.gameID\n                    });\n                })\n                .catch(err => {\n                    console.log(err);\n                    changeGameData(null);\n                    return null;\n                })\n        }\n        else if (gameData.winner === null) { \n            setTimeout(loadGame, 3000); // this client is p1, so schedule the polling for p2 to join\n        }\n        else if (gameData.winner !== null) {\n            setTimeout(() => {setGameFinished(true)}, 6000);\n        }\n    }, [gameData]);\n\n    return (\n        (gameData ?\n        <div id=\"Game\">\n            <div className=\"GamePrize\">\n                <div className=\"GamePrizeText\">Cash Prize:</div>\n                <div className=\"GamePrizeAmount\">{gameData.bet * 2}</div>\n            </div>\n            <div id=\"GameMain\">\n                <Player name={gameData.p1.name} side={gameData.p1.side} result={gameFinished ? (gameData.winningSide === gameData.p1.side ? '-winner' : '') : ''}/>\n                <CoinFlip animation={gameFinished ? 'done' : (gameData.winningSide === null ? 'loading' : 'ready')} winningSide={gameData.winningSide} image={gameData.winningSide === null ? coinLoading : coinReady}/>\n                {gameData.winningSide === null ? <div style={{width: '300px', height: '150px'}}></div> : <Player name={gameData.p2.name} side={gameData.p2.side} wallet={gameData.p2.wallet} result={gameFinished ? (gameData.winningSide === gameData.p2.side ? '-winner' : '') : ''}/>}\n            </div>\n            {gameFinished ? <Confetti confettiSource={{ x: (gameData.winningSide === gameData.p1.side ? 0 : window.innerWidth - 300), y: 0, w: 300, h: 0 }}/> : null}\n            {gameFinished ?  <div className=\"GameOverOptions\">\n                                    <a className=\"GameOverOption\" href=\"/flip\">Play Again</a>\n                                    <a className=\"GameOverOption\" href=\"/\">Return to Home</a>\n                                </div> \n                        : null\n            }\n        </div>\n        : <Navigate to=\"/\" />)\n    );\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}
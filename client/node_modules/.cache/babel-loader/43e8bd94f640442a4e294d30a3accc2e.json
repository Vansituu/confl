{"ast":null,"code":"var _jsxFileName = \"/Users/joshcodrescu/Desktop/coin-flip/client/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport CoinFlip from \"./CoinFlip\";\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport coinReady from './coin-back-ready.svg';\nimport coinLoading from './coin-back-loading.svg';\nimport Player from './Player';\nimport './Game.css';\nimport Confetti from 'react-confetti';\n/*\n\np1: load in. fetch(/addPlayer, gameData)\n                .then(  () => fetch(/otherPlayerData, gameData)\n                                .then(  res => res.json()   )\n                                .then(  (result) => {\n                                    if (result.name === null) {\n                                        setTimeout();\n                                    }\n                                    else {\n                                        fetch(/decideWinner, gameData);\n                                    }\n                                        }) )\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const location = useLocation();\n  const [gameData, changeGameData] = useState({\n    'p1': {\n      'name': location.state.player1Name,\n      'side': location.state.player1Side,\n      'wallet': location.state.player1Wallet\n    },\n    'p2': {\n      'name': null,\n      'side': null,\n      'wallet': null\n    },\n    'bet': location.state.player1Bet,\n    'winningSide': null,\n    'gameID': null\n  });\n  const [gameFinished, setGameFinished] = useState(false); // useEffect(() => {\n  //     const interval = setInterval(async () => {\n  //         console.log(gameData);\n  //         const requestOptions = {\n  //             method: 'POST',\n  //             headers: { 'Content-Type': 'application/json' },\n  //             body: JSON.stringify({'gameID': gameData.gameID})\n  //         };\n  //         fetch('/updateTime', requestOptions).then(result => console.log(\"time updated\"));\n  //     }, 5000);\n  //     return () => clearInterval(interval);\n  // }, [gameData]);\n\n  async function loadGame() {\n    let requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"gameID\": gameData.gameID\n      })\n    };\n    let tempGameData = null;\n    fetch('/otherPlayerData', requestOptions).then(otherPlayerData => otherPlayerData.json()).then(otherPlayerData => {\n      if (otherPlayerData.name === null) {\n        // if no other player has joined recall this function in 1 second\n        console.log(\"other player not found\");\n        setTimeout(loadGame, 3000);\n      } else {\n        console.log(\"player found\");\n        setTimeout(() => {\n          setGameFinished(true);\n        }, 6000);\n        let requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'gameID': gameData.gameID\n          })\n        };\n        fetch('/getWinner', requestOptions) // get winner returns the winner of the game\n        .then(winningSide => winningSide.json()).then(winningSide => {\n          tempGameData = {\n            'p1': {\n              'name': gameData.p1.name,\n              'side': gameData.p1.side,\n              'wallet': gameData.p1.wallet\n            },\n            'p2': {\n              'name': otherPlayerData.name,\n              'side': otherPlayerData.side,\n              'wallet': otherPlayerData.wallet\n            },\n            'bet': gameData.bet,\n            'winningSide': winningSide.side,\n            'gameID': gameData.gameID\n          };\n        }).then(() => {\n          fetch('/endGame', requestOptions); // end game removes the game from the servers database\n        }).then(() => {\n          changeGameData(tempGameData);\n        }).catch(err => {\n          console.log(err);\n          window.location.href = \"/\";\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      window.location.href = \"/\";\n    });\n  }\n\n  useEffect(() => {\n    if (gameData.gameID === null) {\n      console.log(\"starting game\");\n      let requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: gameData.p1.name,\n          side: gameData.p1.side,\n          bet: gameData.bet,\n          wallet: gameData.p1.wallet\n        })\n      };\n      fetch('/addPlayer', requestOptions).then(res => res.json()).then(otherPlayerData => {\n        changeGameData({\n          'p1': {\n            'name': gameData.p1.name,\n            'side': gameData.p1.side,\n            'wallet': gameData.p1.wallet\n          },\n          'p2': {\n            'name': otherPlayerData.name,\n            'side': otherPlayerData.side,\n            'wallet': otherPlayerData.wallet\n          },\n          'bet': gameData.bet,\n          'winningSide': null,\n          'gameID': otherPlayerData.gameID\n        });\n      }).catch(err => {\n        console.log(err);\n        window.location.href = \"/\";\n        return;\n      });\n    } else if (gameData.p2.name === null) {\n      // this client is p1\n      console.log(gameData);\n      console.log(\"in p1 start\");\n      setTimeout(loadGame, 3000);\n    } else if (gameData.winningSide === null) {\n      // this client is p2\n      console.log(\"in p2 start\");\n      setTimeout(() => {\n        setGameFinished(true);\n      }, 6000);\n      let requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'gameID': gameData.gameID\n        })\n      };\n      fetch('/decideWinner', requestOptions) // decide winner initiates the money transfer and returns the winning side\n      .then(winningSide => winningSide.json()).then(winningSide => {\n        changeGameData({\n          'p1': {\n            'name': gameData.p1.name,\n            'side': gameData.p1.side,\n            'wallet': gameData.p1.wallet\n          },\n          'p2': {\n            'name': gameData.p2.name,\n            'side': gameData.p2.side,\n            'wallet': gameData.p2.wallet\n          },\n          'bet': gameData.bet,\n          'winningSide': winningSide.side,\n          'gameID': gameData.gameID\n        });\n      }).catch(err => {\n        console.log(err);\n        window.location.href = \"/\";\n        return;\n      });\n    }\n  }, [gameData]); // useEffect(() => {\n  //     let requestOptions = {\n  //         method: 'POST',\n  //         headers: { 'Content-Type': 'application/json' },\n  //         body: JSON.stringify({name: gameData.p1.name, side: gameData.p1.side, bet: gameData.bet, wallet: gameData.p1.wallet})\n  //     };\n  //     fetch('/addPlayer', requestOptions)\n  //         .then(res => res.json())\n  //         .then((otherPlayerData) => {\n  //             changeGameData({\n  //                 'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n  //                 'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n  //                 'bet': gameData.bet,\n  //                 'winningSide': null,\n  //                 'gameID': otherPlayerData.gameID\n  //             });\n  //         })\n  //         .catch(err => {\n  //             console.log(err);\n  //             window.location.href = \"/\";\n  //             return;\n  //         });\n  //             if (otherPlayerData.name === null) { // if no other player has joined then this client is 'p1'\n  //                 // setTimeout(loadGame, 3000);\n  //                 changeGameData({\n  //                     'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n  //                     'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n  //                     'bet': gameData.bet,\n  //                     'winningSide': null,\n  //                     'gameID': otherPlayerData.gameID\n  //                 });\n  //                 console.log(gameData);\n  //                 setTimeout(loadGame, 3000);\n  //             }\n  //             else { // if other player has joined then this client is 'p2'\n  //                 setTimeout(() => {setGameFinished(true)}, 6000);\n  //                 let requestOptions = {\n  //                     method: 'POST',\n  //                     headers: { 'Content-Type': 'application/json' },\n  //                     body: JSON.stringify({'gameID': otherPlayerData.gameID})\n  //                 };\n  //                 fetch('/decideWinner', requestOptions) // decide winner initiates the money transfer and returns the winning side\n  //                     .then(winningSide => winningSide.json())\n  //                     .then((winningSide) => {\n  //                         changeGameData({\n  //                             'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n  //                             'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n  //                             'bet': gameData.bet,\n  //                             'winningSide': winningSide.side,\n  //                             'gameID': otherPlayerData.gameID\n  //                         })\n  //                     })\n  //                     .catch(err => {\n  //                         console.log(err);\n  //                         window.location.href = \"/\";\n  //                         return;\n  //                     });\n  //             }\n  //         })\n  // }, [])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GamePrize\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GamePrizeText\",\n        children: \"Cash Prize:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GamePrizeAmount\",\n        children: gameData.bet * 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"GameMain\",\n      children: [/*#__PURE__*/_jsxDEV(Player, {\n        name: gameData.p1.name,\n        side: gameData.p1.side,\n        result: gameFinished ? gameData.winningSide === gameData.p1.side ? '-winner' : '' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CoinFlip, {\n        animation: gameFinished ? 'done' : gameData.winningSide === null ? 'loading' : 'ready',\n        winningSide: gameData.winningSide,\n        image: gameData.winningSide === null ? coinLoading : coinReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), gameData.winningSide === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '300px',\n          height: '150px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 50\n      }, this) : /*#__PURE__*/_jsxDEV(Player, {\n        name: gameData.p2.name,\n        side: gameData.p2.side,\n        wallet: gameData.p2.wallet,\n        result: gameFinished ? gameData.winningSide === gameData.p2.side ? '-winner' : '' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 106\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), gameFinished ? /*#__PURE__*/_jsxDEV(Confetti, {\n      confettiSource: {\n        x: gameData.winningSide === gameData.p1.side ? 0 : window.innerWidth - 300,\n        y: 0,\n        w: 300,\n        h: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 29\n    }, this) : null, gameFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GameOverOptions\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"GameOverOption\",\n        href: \"/flip\",\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"GameOverOption\",\n        href: \"/\",\n        children: \"Return to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 30\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"shy6yKSS64+ZgxN9ZXAQ1alhgVM=\", false, function () {\n  return [useLocation];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/joshcodrescu/Desktop/coin-flip/client/src/Game.js"],"names":["CoinFlip","useLocation","useEffect","useState","coinReady","coinLoading","Player","Confetti","Game","location","gameData","changeGameData","state","player1Name","player1Side","player1Wallet","player1Bet","gameFinished","setGameFinished","loadGame","requestOptions","method","headers","body","JSON","stringify","gameID","tempGameData","fetch","then","otherPlayerData","json","name","console","log","setTimeout","winningSide","p1","side","wallet","bet","catch","err","window","href","res","p2","width","height","x","innerWidth","y","w","h"],"mappings":"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","sourcesContent":["import CoinFlip from \"./CoinFlip\";\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport coinReady from './coin-back-ready.svg';\nimport coinLoading from './coin-back-loading.svg';\nimport Player from './Player';\nimport './Game.css';\nimport Confetti from 'react-confetti';\n\n/*\n\np1: load in. fetch(/addPlayer, gameData)\n                .then(  () => fetch(/otherPlayerData, gameData)\n                                .then(  res => res.json()   )\n                                .then(  (result) => {\n                                    if (result.name === null) {\n                                        setTimeout();\n                                    }\n                                    else {\n                                        fetch(/decideWinner, gameData);\n                                    }\n                                        }) )\n\n*/\n\nfunction Game() {\n    const location = useLocation();\n    const [gameData, changeGameData] = useState({\n                                                'p1': {'name': location.state.player1Name, 'side': location.state.player1Side, 'wallet': location.state.player1Wallet}, \n                                                'p2': {'name': null, 'side': null, 'wallet': null}, \n                                                'bet': location.state.player1Bet,\n                                                'winningSide': null,\n                                                'gameID': null\n                                                });\n    const [gameFinished, setGameFinished] = useState(false);\n\n    // useEffect(() => {\n    //     const interval = setInterval(async () => {\n    //         console.log(gameData);\n    //         const requestOptions = {\n    //             method: 'POST',\n    //             headers: { 'Content-Type': 'application/json' },\n    //             body: JSON.stringify({'gameID': gameData.gameID})\n    //         };\n    //         fetch('/updateTime', requestOptions).then(result => console.log(\"time updated\"));\n    //     }, 5000);\n      \n    //     return () => clearInterval(interval);\n    // }, [gameData]);\n\n    async function loadGame() {\n        let requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\"gameID\": gameData.gameID})\n        };\n        let tempGameData = null;\n        fetch('/otherPlayerData', requestOptions)\n                .then(otherPlayerData => otherPlayerData.json())\n                .then((otherPlayerData) => {\n                    if (otherPlayerData.name === null) { // if no other player has joined recall this function in 1 second\n                        console.log(\"other player not found\");\n                        setTimeout(loadGame, 3000);\n                    }\n                    else { \n                        console.log(\"player found\");\n                        setTimeout(() => {setGameFinished(true)}, 6000);\n                        let requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({'gameID': gameData.gameID})\n                        };\n                        fetch('/getWinner', requestOptions) // get winner returns the winner of the game\n                            .then(winningSide => winningSide.json())\n                            .then((winningSide) => {\n                                tempGameData = {\n                                    'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n                                    'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n                                    'bet': gameData.bet,\n                                    'winningSide': winningSide.side,\n                                    'gameID': gameData.gameID\n                                };\n                            })\n                            .then(() => {\n                                fetch('/endGame', requestOptions); // end game removes the game from the servers database\n                            })\n                            .then(() => {\n                                changeGameData(tempGameData);\n                            })\n                            .catch(err => {\n                                console.log(err);\n                                window.location.href = \"/\";\n                            })\n                        \n                    }\n                })\n                .catch(err => {\n                    console.log(err);\n                    window.location.href = \"/\";\n                })\n    }\n\n    useEffect(() => {\n        if (gameData.gameID === null) {\n            console.log(\"starting game\")\n            let requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({name: gameData.p1.name, side: gameData.p1.side, bet: gameData.bet, wallet: gameData.p1.wallet})\n            };\n            fetch('/addPlayer', requestOptions)\n                .then(res => res.json())\n                .then((otherPlayerData) => {\n                    changeGameData({\n                        'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n                        'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n                        'bet': gameData.bet,\n                        'winningSide': null,\n                        'gameID': otherPlayerData.gameID\n                    });\n                })\n                .catch(err => {\n                    console.log(err);\n                    window.location.href = \"/\";\n                    return;\n                });\n        }\n        else if (gameData.p2.name === null) { // this client is p1\n            console.log(gameData)\n            console.log(\"in p1 start\")\n            setTimeout(loadGame, 3000);\n        }\n        else if (gameData.winningSide === null){ // this client is p2\n            console.log(\"in p2 start\")\n            setTimeout(() => {setGameFinished(true)}, 6000);\n            let requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({'gameID': gameData.gameID})\n            };\n            fetch('/decideWinner', requestOptions) // decide winner initiates the money transfer and returns the winning side\n                .then(winningSide => winningSide.json())\n                .then((winningSide) => {\n                    changeGameData({\n                        'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n                        'p2': {'name': gameData.p2.name, 'side': gameData.p2.side, 'wallet': gameData.p2.wallet}, \n                        'bet': gameData.bet,\n                        'winningSide': winningSide.side,\n                        'gameID': gameData.gameID\n                    })\n                })\n                .catch(err => {\n                    console.log(err);\n                    window.location.href = \"/\";\n                    return;\n                });\n        }\n    }, [gameData]);\n\n    // useEffect(() => {\n    //     let requestOptions = {\n    //         method: 'POST',\n    //         headers: { 'Content-Type': 'application/json' },\n    //         body: JSON.stringify({name: gameData.p1.name, side: gameData.p1.side, bet: gameData.bet, wallet: gameData.p1.wallet})\n    //     };\n    //     fetch('/addPlayer', requestOptions)\n    //         .then(res => res.json())\n    //         .then((otherPlayerData) => {\n    //             changeGameData({\n    //                 'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n    //                 'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n    //                 'bet': gameData.bet,\n    //                 'winningSide': null,\n    //                 'gameID': otherPlayerData.gameID\n    //             });\n    //         })\n    //         .catch(err => {\n    //             console.log(err);\n    //             window.location.href = \"/\";\n    //             return;\n    //         });\n    //             if (otherPlayerData.name === null) { // if no other player has joined then this client is 'p1'\n    //                 // setTimeout(loadGame, 3000);\n    //                 changeGameData({\n    //                     'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n    //                     'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n    //                     'bet': gameData.bet,\n    //                     'winningSide': null,\n    //                     'gameID': otherPlayerData.gameID\n    //                 });\n    //                 console.log(gameData);\n    //                 setTimeout(loadGame, 3000);\n    //             }\n    //             else { // if other player has joined then this client is 'p2'\n    //                 setTimeout(() => {setGameFinished(true)}, 6000);\n    //                 let requestOptions = {\n    //                     method: 'POST',\n    //                     headers: { 'Content-Type': 'application/json' },\n    //                     body: JSON.stringify({'gameID': otherPlayerData.gameID})\n    //                 };\n    //                 fetch('/decideWinner', requestOptions) // decide winner initiates the money transfer and returns the winning side\n    //                     .then(winningSide => winningSide.json())\n    //                     .then((winningSide) => {\n    //                         changeGameData({\n    //                             'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n    //                             'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n    //                             'bet': gameData.bet,\n    //                             'winningSide': winningSide.side,\n    //                             'gameID': otherPlayerData.gameID\n    //                         })\n    //                     })\n    //                     .catch(err => {\n    //                         console.log(err);\n    //                         window.location.href = \"/\";\n    //                         return;\n    //                     });\n    //             }\n    //         })\n            \n    // }, [])\n\n    return (\n        <div id=\"Game\">\n            <div className=\"GamePrize\">\n                <div className=\"GamePrizeText\">Cash Prize:</div>\n                <div className=\"GamePrizeAmount\">{gameData.bet * 2}</div>\n            </div>\n            <div id=\"GameMain\">\n                <Player name={gameData.p1.name} side={gameData.p1.side} result={gameFinished ? (gameData.winningSide === gameData.p1.side ? '-winner' : '') : ''}/>\n                <CoinFlip animation={gameFinished ? 'done' : (gameData.winningSide === null ? 'loading' : 'ready')} winningSide={gameData.winningSide} image={gameData.winningSide === null ? coinLoading : coinReady}/>\n                {gameData.winningSide === null ? <div style={{width: '300px', height: '150px'}}></div> : <Player name={gameData.p2.name} side={gameData.p2.side} wallet={gameData.p2.wallet} result={gameFinished ? (gameData.winningSide === gameData.p2.side ? '-winner' : '') : ''}/>}\n            </div>\n            {gameFinished ? <Confetti confettiSource={{ x: (gameData.winningSide === gameData.p1.side ? 0 : window.innerWidth - 300), y: 0, w: 300, h: 0 }}/> : null}\n            {gameFinished ?  <div className=\"GameOverOptions\">\n                                    <a className=\"GameOverOption\" href=\"/flip\">Play Again</a>\n                                    <a className=\"GameOverOption\" href=\"/\">Return to Home</a>\n                                </div> \n                        : null\n            }\n        </div>\n    );\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/joshcodrescu/Desktop/coin-flip/client/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport CoinFlip from \"./CoinFlip\";\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport coinReady from './coin-back-ready.svg';\nimport coinLoading from './coin-back-loading.svg';\nimport Player from './Player';\nimport './Game.css';\nimport Confetti from 'react-confetti';\n/*\n\np1: load in. fetch(/addPlayer, gameData)\n                .then(  () => fetch(/otherPlayerData, gameData)\n                                .then(  res => res.json()   )\n                                .then(  (result) => {\n                                    if (result.name === null) {\n                                        setTimeout();\n                                    }\n                                    else {\n                                        fetch(/decideWinner, gameData);\n                                    }\n                                        }) )\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const location = useLocation();\n  const [gameData, changeGameData] = useState({\n    'p1': {\n      'name': location.state.player1Name,\n      'side': location.state.player1Side,\n      'wallet': location.state.player1Wallet\n    },\n    'p2': {\n      'name': null,\n      'side': null,\n      'wallet': null\n    },\n    'bet': location.state.player1Bet,\n    'winningSide': null\n  });\n  const [gameFinished, setGameFinished] = useState(false);\n\n  async function loadGame() {\n    console.log(\"this got called\");\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: gameData.p1.name,\n        side: gameData.p1.side,\n        bet: gameData.bet,\n        wallet: gameData.p1.wallet\n      })\n    };\n    await fetch('/updateTime', requestOptions);\n    console.log('time updated');\n    fetch('/otherPlayerData', requestOptions).then(otherPlayerData => otherPlayerData.json()).then(otherPlayerData => {\n      if (otherPlayerData.name === null) {\n        // if no other player has joined recall this function in 1 second\n        console.log(\"other player not found\");\n        setTimeout(loadGame, 3000);\n      } else {\n        console.log(\"player found\");\n        setTimeout(() => {\n          setGameFinished(true);\n        }, 6000);\n        let requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'p1': {\n              name: gameData.p1.name,\n              side: gameData.p1.side,\n              wallet: gameData.p1.wallet\n            },\n            'p2': {\n              name: otherPlayerData.name,\n              side: otherPlayerData.side,\n              wallet: otherPlayerData.wallet\n            },\n            'bet': gameData.bet\n          })\n        };\n        fetch('/getWinner', requestOptions) // get winner returns the winner of the game\n        .then(winningSide => winningSide.json()).then(winningSide => {\n          changeGameData({\n            'p1': {\n              'name': gameData.p1.name,\n              'side': gameData.p1.side,\n              'wallet': gameData.p1.wallet\n            },\n            'p2': {\n              'name': otherPlayerData.name,\n              'side': otherPlayerData.side,\n              'wallet': otherPlayerData.wallet\n            },\n            'bet': gameData.bet,\n            'winningSide': winningSide.side\n          });\n        }).then(() => {\n          fetch('/endGame', requestOptions); // end game removes the game from the servers database\n        });\n      }\n    });\n  }\n\n  useEffect(() => {\n    async function startGame() {\n      let requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: gameData.p1.name,\n          side: gameData.p1.side,\n          bet: gameData.bet,\n          wallet: gameData.p1.wallet\n        })\n      };\n      await fetch('/addPlayer', requestOptions).then(res => res.json()).then(otherPlayerData => {\n        if (otherPlayerData.name === null) {\n          // if no other player has joined then this client is 'p1'\n          setTimeout(loadGame, 1000);\n        } else {\n          // if other player has joined then this client is 'p2'\n          setTimeout(() => {\n            setGameFinished(true);\n          }, 6000);\n          let requestOptions = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              'p1': {\n                name: otherPlayerData.name,\n                side: otherPlayerData.side,\n                wallet: otherPlayerData.wallet\n              },\n              'p2': {\n                name: gameData.p1.name,\n                side: gameData.p1.side,\n                wallet: gameData.p1.wallet\n              },\n              'bet': gameData.bet\n            })\n          };\n          fetch('/decideWinner', requestOptions) // decide winner initiates the money transfer and returns the winning side\n          .then(winningSide => winningSide.json()).then(winningSide => {\n            changeGameData({\n              'p1': {\n                'name': gameData.p1.name,\n                'side': gameData.p1.side,\n                'wallet': gameData.p1.wallet\n              },\n              'p2': {\n                'name': otherPlayerData.name,\n                'side': otherPlayerData.side,\n                'wallet': otherPlayerData.wallet\n              },\n              'bet': gameData.bet,\n              'winningSide': winningSide.side\n            });\n          });\n        }\n      });\n    }\n\n    startGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GamePrize\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GamePrizeText\",\n        children: \"Cash Prize:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GamePrizeAmount\",\n        children: gameData.bet * 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"GameMain\",\n      children: [/*#__PURE__*/_jsxDEV(Player, {\n        name: gameData.p1.name,\n        side: gameData.p1.side,\n        result: gameFinished ? gameData.winningSide === gameData.p1.side ? '-winner' : '' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CoinFlip, {\n        animation: gameFinished ? 'done' : gameData.winningSide === null ? 'loading' : 'ready',\n        winningSide: gameData.winningSide,\n        image: gameData.winningSide === null ? coinLoading : coinReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), gameData.winningSide === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '300px',\n          height: '150px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 50\n      }, this) : /*#__PURE__*/_jsxDEV(Player, {\n        name: gameData.p2.name,\n        side: gameData.p2.side,\n        wallet: gameData.p2.wallet,\n        result: gameFinished ? gameData.winningSide === gameData.p2.side ? '-winner' : '' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 106\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), gameFinished ? /*#__PURE__*/_jsxDEV(Confetti, {\n      confettiSource: {\n        x: gameData.winningSide === gameData.p1.side ? 0 : window.innerWidth - 300,\n        y: 0,\n        w: 300,\n        h: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    }, this) : null, gameFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GameOverOptions\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"GameOverOption\",\n        href: \"/flip\",\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"GameOverOption\",\n        href: \"/\",\n        children: \"Return to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 30\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"2W1AX6ALPbWnpfq8+kHVECJrpWM=\", false, function () {\n  return [useLocation];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/joshcodrescu/Desktop/coin-flip/client/src/Game.js"],"names":["CoinFlip","useLocation","useEffect","useState","coinReady","coinLoading","Player","Confetti","Game","location","gameData","changeGameData","state","player1Name","player1Side","player1Wallet","player1Bet","gameFinished","setGameFinished","loadGame","console","log","requestOptions","method","headers","body","JSON","stringify","name","p1","side","bet","wallet","fetch","then","otherPlayerData","json","setTimeout","winningSide","startGame","res","width","height","p2","x","window","innerWidth","y","w","h"],"mappings":"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","sourcesContent":["import CoinFlip from \"./CoinFlip\";\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport coinReady from './coin-back-ready.svg';\nimport coinLoading from './coin-back-loading.svg';\nimport Player from './Player';\nimport './Game.css';\nimport Confetti from 'react-confetti';\n\n/*\n\np1: load in. fetch(/addPlayer, gameData)\n                .then(  () => fetch(/otherPlayerData, gameData)\n                                .then(  res => res.json()   )\n                                .then(  (result) => {\n                                    if (result.name === null) {\n                                        setTimeout();\n                                    }\n                                    else {\n                                        fetch(/decideWinner, gameData);\n                                    }\n                                        }) )\n\n*/\n\nfunction Game() {\n    const location = useLocation();\n    const [gameData, changeGameData] = useState({\n                                                'p1': {'name': location.state.player1Name, 'side': location.state.player1Side, 'wallet': location.state.player1Wallet}, \n                                                'p2': {'name': null, 'side': null, 'wallet': null}, \n                                                'bet': location.state.player1Bet,\n                                                'winningSide': null\n                                                });\n    const [gameFinished, setGameFinished] = useState(false);\n\n    async function loadGame() {\n        console.log(\"this got called\");\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({name: gameData.p1.name, side: gameData.p1.side, bet: gameData.bet, wallet: gameData.p1.wallet})\n        };\n        await fetch('/updateTime', requestOptions);\n        console.log('time updated');\n        fetch('/otherPlayerData', requestOptions)\n                .then(otherPlayerData => otherPlayerData.json())\n                .then((otherPlayerData) => {\n                    if (otherPlayerData.name === null) { // if no other player has joined recall this function in 1 second\n                        console.log(\"other player not found\");\n                        setTimeout(loadGame, 3000);\n                    }\n                    else { \n                        console.log(\"player found\");\n                        setTimeout(() => {setGameFinished(true)}, 6000);\n                        let requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({'p1': {name: gameData.p1.name, side: gameData.p1.side, wallet: gameData.p1.wallet}, 'p2': {name: otherPlayerData.name, side: otherPlayerData.side, wallet: otherPlayerData.wallet}, 'bet': gameData.bet})\n                        };\n                        fetch('/getWinner', requestOptions) // get winner returns the winner of the game\n                            .then(winningSide => winningSide.json())\n                            .then((winningSide) => {\n                                changeGameData({\n                                    'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n                                    'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n                                    'bet': gameData.bet,\n                                    'winningSide': winningSide.side\n                                })\n                            })\n                            .then(() => {\n                                fetch('/endGame', requestOptions); // end game removes the game from the servers database\n                            })\n                        \n                    }\n                })\n    }\n\n    useEffect(() => {\n        async function startGame() {\n            let requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({name: gameData.p1.name, side: gameData.p1.side, bet: gameData.bet, wallet: gameData.p1.wallet})\n            };\n            await fetch('/addPlayer', requestOptions)\n                .then(res => res.json())\n                .then((otherPlayerData) => {\n                    if (otherPlayerData.name === null) { // if no other player has joined then this client is 'p1'\n                        setTimeout(loadGame, 1000);\n                    }\n                    else { // if other player has joined then this client is 'p2'\n                        setTimeout(() => {setGameFinished(true)}, 6000);\n                        let requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({'p1': {name: otherPlayerData.name, side: otherPlayerData.side, wallet: otherPlayerData.wallet}, 'p2': {name: gameData.p1.name, side: gameData.p1.side, wallet: gameData.p1.wallet}, 'bet': gameData.bet})\n                        };\n                        fetch('/decideWinner', requestOptions) // decide winner initiates the money transfer and returns the winning side\n                            .then(winningSide => winningSide.json())\n                            .then((winningSide) => {\n                                changeGameData({\n                                    'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n                                    'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n                                    'bet': gameData.bet,\n                                    'winningSide': winningSide.side\n                                })\n                            });\n                    }\n                })\n        }\n        startGame();\n    }, [])\n\n    return (\n        <div id=\"Game\">\n            <div className=\"GamePrize\">\n                <div className=\"GamePrizeText\">Cash Prize:</div>\n                <div className=\"GamePrizeAmount\">{gameData.bet * 2}</div>\n            </div>\n            <div id=\"GameMain\">\n                <Player name={gameData.p1.name} side={gameData.p1.side} result={gameFinished ? (gameData.winningSide === gameData.p1.side ? '-winner' : '') : ''}/>\n                <CoinFlip animation={gameFinished ? 'done' : (gameData.winningSide === null ? 'loading' : 'ready')} winningSide={gameData.winningSide} image={gameData.winningSide === null ? coinLoading : coinReady}/>\n                {gameData.winningSide === null ? <div style={{width: '300px', height: '150px'}}></div> : <Player name={gameData.p2.name} side={gameData.p2.side} wallet={gameData.p2.wallet} result={gameFinished ? (gameData.winningSide === gameData.p2.side ? '-winner' : '') : ''}/>}\n            </div>\n            {gameFinished ? <Confetti confettiSource={{ x: (gameData.winningSide === gameData.p1.side ? 0 : window.innerWidth - 300), y: 0, w: 300, h: 0 }}/> : null}\n            {gameFinished ?  <div className=\"GameOverOptions\">\n                                    <a className=\"GameOverOption\" href=\"/flip\">Play Again</a>\n                                    <a className=\"GameOverOption\" href=\"/\">Return to Home</a>\n                                </div> \n                        : null\n            }\n        </div>\n    );\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}
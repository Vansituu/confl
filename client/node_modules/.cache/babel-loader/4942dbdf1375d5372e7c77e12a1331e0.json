{"ast":null,"code":"var _jsxFileName = \"/Users/joshcodrescu/Desktop/coin-flip/client/src/Header.js\";\nimport CoinLogo from './CoinLogo';\nimport Hamburger from './Hamburger';\nimport './Header.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Header(props) {\n  const connectToPhantom = async setResp => {\n    const isPhantomInstalled = window.solana && window.solana.isPhantom;\n\n    if (!isPhantomInstalled) {\n      alert(\"No Phantom wallet detected\");\n      return;\n    }\n\n    try {\n      const resp = await window.solana.connect();\n      resp.publicKey.toString();\n      setResp({\n        'phantom': resp,\n        'metamask': null\n      });\n    } catch (err) {\n      console.log(\"rejected\");\n    }\n  };\n\n  const connectToMetamask = async setResp => {\n    const isMetamaskInstalled = window.ethereum;\n    console.log(window.ethereum);\n\n    if (!isMetamaskInstalled) {\n      alert(\"No Metamask wallet detected\");\n      return;\n    }\n\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const account = accounts[0];\n      console.log(accounts);\n    } catch (err) {\n      console.log(\"rejected\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"StartHeader\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ConnectWallet\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"\",\n        onClick: () => {\n          connectToPhantom(props.setResp);\n        },\n        children: \"Connect to Phantom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"\",\n        onClick: () => {\n          connectToMetamask(props.setResp);\n        },\n        children: \"Connect to Metamask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      id: \"StartLogo\",\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"StartLogo\",\n        children: [/*#__PURE__*/_jsxDEV(CoinLogo, {\n          width: \"68\",\n          height: \"68\",\n          class: \"CoinLogo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"flip\",\n          children: \"FLIP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Hamburger, {\n      onMenuClick: props.onMenuClick,\n      width: \"50\",\n      height: \"50\",\n      class: \"Hamburger\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Header;\n;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/joshcodrescu/Desktop/coin-flip/client/src/Header.js"],"names":["CoinLogo","Hamburger","Header","props","connectToPhantom","setResp","isPhantomInstalled","window","solana","isPhantom","alert","resp","connect","publicKey","toString","err","console","log","connectToMetamask","isMetamaskInstalled","ethereum","accounts","request","method","account","onMenuClick"],"mappings":"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","sourcesContent":["import CoinLogo from './CoinLogo';\nimport Hamburger from './Hamburger'\nimport './Header.css'\n\nfunction Header(props) {\n    const connectToPhantom = async (setResp) => {\n        const isPhantomInstalled = window.solana && window.solana.isPhantom;\n        if (!isPhantomInstalled) {\n            alert(\"No Phantom wallet detected\");\n            return;\n        }\n        try {\n            const resp = await window.solana.connect();\n            resp.publicKey.toString()\n            setResp({'phantom': resp, 'metamask': null});\n        } catch (err) {\n            console.log(\"rejected\");\n        }\n    }\n\n    const connectToMetamask = async (setResp) => {\n        const isMetamaskInstalled = window.ethereum;\n        console.log(window.ethereum);\n        if (!isMetamaskInstalled) {\n            alert(\"No Metamask wallet detected\");\n            return;\n        }\n        try {\n            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n            const account = accounts[0];\n            console.log(accounts);\n        } catch (err) {\n            console.log(\"rejected\");\n        }\n    }\n\n    return (\n        <div className='StartHeader'>\n            <div className='ConnectWallet'>\n                <button className=\"\" onClick={() => {connectToPhantom(props.setResp)}}>Connect to Phantom</button>\n                <button className=\"\" onClick={() => {connectToMetamask(props.setResp)}}>Connect to Metamask</button>\n            </div>\n            <a id=\"StartLogo\" href='/'>\n                <div className='StartLogo'>\n                    <CoinLogo width=\"68\" height=\"68\" class=\"CoinLogo\"/>\n                    <span id=\"flip\">FLIP</span>\n                </div>\n            </a>\n            <Hamburger onMenuClick={props.onMenuClick} width=\"50\" height=\"50\" class=\"Hamburger\"/>\n        </div>  \n        \n    );\n};\n\nexport default Header;"]},"metadata":{},"sourceType":"module"}
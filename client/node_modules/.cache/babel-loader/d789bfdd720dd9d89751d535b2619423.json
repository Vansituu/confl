{"ast":null,"code":"var _jsxFileName = \"/Users/joshcodrescu/Desktop/coin-flip/client/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport CoinFlip from \"./CoinFlip\";\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport backReady from './coin-back-ready.svg';\nimport backLoading from './coin-back-loading.svg';\nimport Player from './Player';\nimport './Game.css';\nimport Confetti from 'react-confetti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const location = useLocation();\n  const {\n    player1Name,\n    player1Bet,\n    player1Side,\n    player1Wallet\n  } = location.state;\n  const [player2, changePlayer2] = useState({\n    name: null,\n    side: null,\n    wallet: null\n  });\n  const [flipState, setFlipState] = useState('loading');\n  const [result, setResult] = useState(null);\n  const [winningSide, setWinningSide] = useState('Heads');\n\n  function findPlayer() {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        playerName: location.state.player1Name,\n        side: location.state.player1Side,\n        bet: location.state.player1Bet,\n        wallet: location.state.player1Wallet\n      })\n    };\n    fetch('/findPlayer', requestOptions).then(res => res.json()).then(res => changePlayer2({\n      side: res.side,\n      wallet: res.wallet,\n      name: res.name\n    }));\n  }\n\n  useEffect(() => {\n    fetch('/gameWinner').then(res => res.json()).then(result => {\n      setWinningSide(result['winner']);\n    });\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        playerName: location.state.player1Name,\n        side: location.state.player1Side,\n        bet: location.state.player1Bet,\n        wallet: location.state.player1Wallet\n      })\n    };\n    fetch('/addPlayer', requestOptions).then(res => res.json()).then(result => console.log(result));\n    setTimeout(() => {\n      findPlayer();\n    }, 500);\n  }, []);\n\n  function reset() {\n    setFlipState('loading');\n    fetch('/gameWinner').then(res => res.json()).then(result => {\n      setWinningSide(result['winner']);\n    });\n    setResult(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GamePrize\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GamePrizeText\",\n        children: \"Cash Prize:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GamePrizeAmount\",\n        children: player1Bet * 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"GameMain\",\n      children: [/*#__PURE__*/_jsxDEV(Player, {\n        name: player1Name,\n        side: player1Side,\n        result: player1Side === result ? '-winner' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CoinFlip, {\n        animation: result === null ? flipState : 'done',\n        winningSide: winningSide,\n        image: flipState === 'loading' ? backLoading : backReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), player2.side === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '300px',\n          height: '150px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 42\n      }, this) : /*#__PURE__*/_jsxDEV(Player, {\n        name: player2.name,\n        side: player2.side,\n        wallet: player2.wallet,\n        result: !result ? '-winner' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 98\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"GameButton\",\n      onClick: () => {\n        setTimeout(() => {\n          setResult(winningSide);\n        }, 5850);\n        setFlipState('ready');\n      },\n      children: \"flip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"GameButton\",\n      onClick: () => {\n        reset();\n      },\n      children: \"reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), result !== null ? /*#__PURE__*/_jsxDEV(Confetti, {\n      confettiSource: {\n        x: winningSide === player1Side ? 0 : window.innerWidth - 300,\n        y: 0,\n        w: 300,\n        h: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 32\n    }, this) : null, result !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GameOverOptions\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"GameOverOption\",\n        href: \"/flip\",\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"GameOverOption\",\n        href: \"/\",\n        children: \"Return to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 33\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"ufixbhchINazEm5+JQxtzltEDvw=\", false, function () {\n  return [useLocation];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/joshcodrescu/Desktop/coin-flip/client/src/Game.js"],"names":["CoinFlip","useLocation","useEffect","useState","backReady","backLoading","Player","Confetti","Game","location","player1Name","player1Bet","player1Side","player1Wallet","state","player2","changePlayer2","name","side","wallet","flipState","setFlipState","result","setResult","winningSide","setWinningSide","findPlayer","requestOptions","method","headers","body","JSON","stringify","playerName","bet","fetch","then","res","json","console","log","setTimeout","reset","width","height","x","window","innerWidth","y","w","h"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,YAAP;AACA,OAAOC,QAAP,MAAqB,gBAArB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACZ,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA,WAA3B;AAAwCC,IAAAA;AAAxC,MAA0DJ,QAAQ,CAACK,KAAzE;AACA,QAAM,CAACC,OAAD,EAAUC,aAAV,IAA2Bb,QAAQ,CAAC;AAACc,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,IAAI,EAAE,IAAnB;AAAyBC,IAAAA,MAAM,EAAE;AAAjC,GAAD,CAAzC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,SAAD,CAA1C;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,OAAD,CAA9C;;AAEA,WAASuB,UAAT,GAAsB;AAClB,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,UAAU,EAAExB,QAAQ,CAACK,KAAT,CAAeJ,WAA5B;AAAyCQ,QAAAA,IAAI,EAAET,QAAQ,CAACK,KAAT,CAAeF,WAA9D;AAA2EsB,QAAAA,GAAG,EAAEzB,QAAQ,CAACK,KAAT,CAAeH,UAA/F;AAA2GQ,QAAAA,MAAM,EAAEV,QAAQ,CAACK,KAAT,CAAeD;AAAlI,OAAf;AAHa,KAAvB;AAKAsB,IAAAA,KAAK,CAAC,aAAD,EAAgBR,cAAhB,CAAL,CACKS,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWC,GAAD,IAASrB,aAAa,CAAC;AAACE,MAAAA,IAAI,EAAEmB,GAAG,CAACnB,IAAX;AAAiBC,MAAAA,MAAM,EAAEkB,GAAG,CAAClB,MAA7B;AAAqCF,MAAAA,IAAI,EAAEoB,GAAG,CAACpB;AAA/C,KAAD,CAFhC;AAGH;;AAEDf,EAAAA,SAAS,CAAC,MAAM;AACZiC,IAAAA,KAAK,CAAC,aAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWd,MAAD,IAAY;AACdG,MAAAA,cAAc,CAACH,MAAM,CAAC,QAAD,CAAP,CAAd;AACH,KAJL;AAKA,UAAMK,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,UAAU,EAAExB,QAAQ,CAACK,KAAT,CAAeJ,WAA5B;AAAyCQ,QAAAA,IAAI,EAAET,QAAQ,CAACK,KAAT,CAAeF,WAA9D;AAA2EsB,QAAAA,GAAG,EAAEzB,QAAQ,CAACK,KAAT,CAAeH,UAA/F;AAA2GQ,QAAAA,MAAM,EAAEV,QAAQ,CAACK,KAAT,CAAeD;AAAlI,OAAf;AAHa,KAAvB;AAKAsB,IAAAA,KAAK,CAAC,YAAD,EAAeR,cAAf,CAAL,CACKS,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWd,MAAD,IAAYiB,OAAO,CAACC,GAAR,CAAYlB,MAAZ,CAFtB;AAGAmB,IAAAA,UAAU,CAAC,MAAM;AAACf,MAAAA,UAAU;AAAG,KAArB,EAAuB,GAAvB,CAAV;AACH,GAfQ,EAeN,EAfM,CAAT;;AAiBA,WAASgB,KAAT,GAAiB;AACbrB,IAAAA,YAAY,CAAC,SAAD,CAAZ;AACAc,IAAAA,KAAK,CAAC,aAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWd,MAAD,IAAY;AACdG,MAAAA,cAAc,CAACH,MAAM,CAAC,QAAD,CAAP,CAAd;AACH,KAJL;AAKAC,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH;;AAED,sBACI;AAAK,IAAA,EAAE,EAAC,MAAR;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,kBAAkCZ,UAAU,GAAG;AAA/C;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAED,WAAd;AAA2B,QAAA,IAAI,EAAEE,WAAjC;AAA8C,QAAA,MAAM,EAAEA,WAAW,KAAKU,MAAhB,GAAyB,SAAzB,GAAqC;AAA3F;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,QAAD;AAAU,QAAA,SAAS,EAAEA,MAAM,KAAK,IAAX,GAAkBF,SAAlB,GAA8B,MAAnD;AAA2D,QAAA,WAAW,EAAEI,WAAxE;AAAqF,QAAA,KAAK,EAAEJ,SAAS,KAAK,SAAd,GAA0Bf,WAA1B,GAAwCD;AAApI;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGKW,OAAO,CAACG,IAAR,KAAiB,IAAjB,gBAAwB;AAAK,QAAA,KAAK,EAAE;AAACyB,UAAAA,KAAK,EAAE,OAAR;AAAiBC,UAAAA,MAAM,EAAE;AAAzB;AAAZ;AAAA;AAAA;AAAA;AAAA,cAAxB,gBAAgF,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAE7B,OAAO,CAACE,IAAtB;AAA4B,QAAA,IAAI,EAAEF,OAAO,CAACG,IAA1C;AAAgD,QAAA,MAAM,EAAEH,OAAO,CAACI,MAAhE;AAAwE,QAAA,MAAM,EAAE,CAACG,MAAD,GAAU,SAAV,GAAsB;AAAtG;AAAA;AAAA;AAAA;AAAA,cAHrF;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAUI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAA+B,MAAA,OAAO,EAAE,MAAM;AAACmB,QAAAA,UAAU,CAAC,MAAM;AAAClB,UAAAA,SAAS,CAACC,WAAD,CAAT;AAAuB,SAA/B,EAAiC,IAAjC,CAAV;AAAkDH,QAAAA,YAAY,CAAC,OAAD,CAAZ;AAAsB,OAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,eAWI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAA+B,MAAA,OAAO,EAAE,MAAM;AAACqB,QAAAA,KAAK;AAAG,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ,EAYKpB,MAAM,KAAK,IAAX,gBAAkB,QAAC,QAAD;AAAU,MAAA,cAAc,EAAE;AAAEuB,QAAAA,CAAC,EAAGrB,WAAW,KAAKZ,WAAhB,GAA8B,CAA9B,GAAkCkC,MAAM,CAACC,UAAP,GAAoB,GAA5D;AAAkEC,QAAAA,CAAC,EAAE,CAArE;AAAwEC,QAAAA,CAAC,EAAE,GAA3E;AAAgFC,QAAAA,CAAC,EAAE;AAAnF;AAA1B;AAAA;AAAA;AAAA;AAAA,YAAlB,GAAwI,IAZ7I,EAaK5B,MAAM,KAAK,IAAX,gBAAmB;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACI;AAAG,QAAA,SAAS,EAAC,gBAAb;AAA8B,QAAA,IAAI,EAAC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,gBAAb;AAA8B,QAAA,IAAI,EAAC,GAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAAnB,GAIiB,IAjBtB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH;;GApEQd,I;UACYP,W;;;KADZO,I;AAsET,eAAeA,IAAf","sourcesContent":["import CoinFlip from \"./CoinFlip\";\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport backReady from './coin-back-ready.svg';\nimport backLoading from './coin-back-loading.svg';\nimport Player from './Player';\nimport './Game.css';\nimport Confetti from 'react-confetti';\n\nfunction Game() {\n    const location = useLocation()\n    const { player1Name, player1Bet, player1Side, player1Wallet } = location.state;\n    const [player2, changePlayer2] = useState({name: null, side: null, wallet: null});\n    const [flipState, setFlipState] = useState('loading');\n    const [result, setResult] = useState(null);\n    const [winningSide, setWinningSide] = useState('Heads');\n\n    function findPlayer() {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({playerName: location.state.player1Name, side: location.state.player1Side, bet: location.state.player1Bet, wallet: location.state.player1Wallet})\n        };\n        fetch('/findPlayer', requestOptions)\n            .then(res => res.json())\n            .then((res) => changePlayer2({side: res.side, wallet: res.wallet, name: res.name}));\n    }\n\n    useEffect(() => {\n        fetch('/gameWinner')\n            .then(res => res.json())\n            .then((result) => {\n                setWinningSide(result['winner']);\n            });\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({playerName: location.state.player1Name, side: location.state.player1Side, bet: location.state.player1Bet, wallet: location.state.player1Wallet})\n        };\n        fetch('/addPlayer', requestOptions)\n            .then(res => res.json())\n            .then((result) => console.log(result));\n        setTimeout(() => {findPlayer()}, 500);\n    }, []);\n\n    function reset() {\n        setFlipState('loading');\n        fetch('/gameWinner')\n            .then(res => res.json())\n            .then((result) => {\n                setWinningSide(result['winner']);\n            });\n        setResult(null);\n    }\n\n    return (\n        <div id=\"Game\">\n            <div className=\"GamePrize\">\n                <div className=\"GamePrizeText\">Cash Prize:</div>\n                <div className=\"GamePrizeAmount\">{player1Bet * 2}</div>\n            </div>\n            <div id=\"GameMain\">\n                <Player name={player1Name} side={player1Side} result={player1Side === result ? '-winner' : ''}/>\n                <CoinFlip animation={result === null ? flipState : 'done'} winningSide={winningSide} image={flipState === 'loading' ? backLoading : backReady}/>\n                {player2.side === null ? <div style={{width: '300px', height: '150px'}}></div> : <Player name={player2.name} side={player2.side} wallet={player2.wallet} result={!result ? '-winner' : ''}/>}\n            </div>\n            <button className='GameButton' onClick={() => {setTimeout(() => {setResult(winningSide)}, 5850); setFlipState('ready')}}>flip</button>\n            <button className='GameButton' onClick={() => {reset()}}>reset</button>\n            {result !== null ? <Confetti confettiSource={{ x: (winningSide === player1Side ? 0 : window.innerWidth - 300), y: 0, w: 300, h: 0 }}/> : null}\n            {result !== null ?  <div className=\"GameOverOptions\">\n                                    <a className=\"GameOverOption\" href=\"/flip\">Play Again</a>\n                                    <a className=\"GameOverOption\" href=\"/\">Return to Home</a>\n                                </div> \n                            : null\n            }\n        </div>\n    );\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}